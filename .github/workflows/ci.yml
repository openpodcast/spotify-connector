name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [created]

env:
  PYTHONUNBUFFERED: 1

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/setup.py', '**/Pipfile.lock') }}

      - name: Install formatters and linters
        run: |
          python -m pip install --upgrade pip
          python -m pip install black flake8 pylint isort

      - name: Install pipenv and dependencies
        run: |
          python -m pip install --upgrade pipenv wheel
          pipenv install --deploy --dev
        continue-on-error: true

      - name: Check code formatting with black
        run: |
          if command -v pipenv &> /dev/null; then
            pipenv run black --check --diff .
          else
            black --check --diff spotifyconnector/
          fi

      - name: Check import sorting with isort
        run: |
          if command -v pipenv &> /dev/null; then
            pipenv run isort --check-only --diff .
          else
            isort --check-only --diff spotifyconnector/
          fi

      - name: Run flake8
        run: |
          if command -v pipenv &> /dev/null; then
            pipenv run flake8 spotifyconnector
          else
            flake8 spotifyconnector/ --max-line-length=88 --extend-ignore=E203,W503
          fi

      - name: Run pylint
        run: |
          if command -v pipenv &> /dev/null; then
            pipenv run pylint $(git ls-files '*.py') --rcfile=./pylintrc
          else
            pylint spotifyconnector/ --rcfile=./pylintrc
          fi
        continue-on-error: true

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.12"]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py', '**/Pipfile.lock') }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install -e .

      - name: Install pipenv dependencies (if available)
        run: |
          if [ -f "Pipfile" ]; then
            python -m pip install --upgrade pipenv
            pipenv install --deploy --dev
            pipenv install pytest pytest-cov pytest-xdist
          fi
        continue-on-error: true

      - name: Run tests with pytest
        run: |
          if command -v pipenv &> /dev/null && [ -f "Pipfile" ]; then
            echo "Running tests with pipenv..."
            pipenv run python -m pytest tests/ -v --tb=short --cov=spotifyconnector --cov-report=xml --cov-report=term-missing || {
              echo "Pipenv failed, falling back to global Python..."
              python -m pytest tests/ -v --tb=short --cov=spotifyconnector --cov-report=xml --cov-report=term-missing
            }
          else
            echo "Running tests with global Python..."
            python -m pytest tests/ -v --tb=short --cov=spotifyconnector --cov-report=xml --cov-report=term-missing
          fi

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -e .
      
      - name: Check for known security vulnerabilities
        run: safety check --json || true
      
      - name: Run bandit security linter
        run: bandit -r spotifyconnector/ -f json || true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    timeout-minutes: 10
    
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

  deploy:
    name: Deploy to PyPI
    needs: [lint, test, security, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Install deployment tools
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*